using Business;
using Business.Core.Service;
using Database;
using Database.Domain.Enums;
using Ext.Direct;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using Util.Common;
using Util.DataType.Datatable;

namespace {$Service_NameSpace}.Services
{
    /// <summary>
    /// 服务类:{$Table_Comment}
    /// </summary>
    [DirectAction("ExtService{$ClassName}")]
    public class ExtService{$ClassName} : ExtServiceBasic
    {
        /// <summary>
        /// {$Table_Comment}服务
        /// </summary>
        private static IService{$ClassName} {$InstanceName}Service;

        /// <summary>
        /// 返回Ext Direct Api的ProviderName
        /// </summary>
        public override string ProviderName
        {
            get
            {
                return "Ext.app.remote_{$InstanceName}";
            }
        }

        /// <summary>
        /// 保存{$Table_Comment}
        /// </summary>
        /// <param name="{$InstanceName}Form">{$Table_Comment}输入表单</param>
        /// <returns></returns>
        [DirectMethodForm]
        public JObject save(HttpRequest {$InstanceName}Form)
        {
            bool result = false;
            string msg  = "";
            if ({$InstanceName}Form != null)
            {
                {$ClassName} {$InstanceName} = new {$ClassName}();
                base.CopyProperties({$InstanceName}, {$InstanceName}Form);
                try
                {
                    {$InstanceName}.{$CommitTime_Str} = DateTime.Now;
                    {$InstanceName}.{$UpdateTime_Str} = DateTime.Now;
                    db.{$ClassName}.Add({$InstanceName}); 
                    db.SaveChanges();
                    msg = "保存成功!";
                    result = true;
                }
                catch (Exception error)
                {
                    msg = "操作失败:"+error.Message+",请重试!";
                    result = true;
                }
                
            }
            return new JObject(
                new JProperty("success", result),
                new JProperty("msg", msg)
            );
        }

        /// <summary>
        /// 更新{$Table_Comment}
        /// </summary>
        /// <param name="{$InstanceName}Form">{$Table_Comment}输入表单</param>
        /// <returns></returns>
        [DirectMethodForm]
        public JObject update(HttpRequest {$InstanceName}Form)
        {
            bool result = false;
            string msg  = "";
            if ({$InstanceName}Form != null)
            {
                string {$InstanceName}_id = {$InstanceName}Form["ID"];
                string Username = {$InstanceName}Form["Username"];
                try
                {
                    int id = UtilNumber.Parse({$InstanceName}_id);
                    {$ClassName} {$InstanceName} = db.{$ClassName}.Single(e => e.ID.Equals(id));
                    base.CopyProperties({$InstanceName}, {$InstanceName}Form);
                    {$InstanceName}.{$UpdateTime_Str} = DateTime.Now;
                    db.SaveChanges();
                    msg = "保存成功!";
                    result = true;
                }
                catch (Exception error)
                {
                    msg = "操作失败:" + error.Message + ",请重试!";
                }
            }
            return new JObject(
                new JProperty("success", result),
                new JProperty("msg", msg)
            );
        }

        /// <summary>
        /// 根据主键删除数据对象:{$Table_Comment}的多条数据记录
        /// </summary>
        /// <param name="condition">数据对象编号。形式如下:1,2,3,4</param>
        /// <returns></returns>
        [DirectMethod]
        public JObject deleteByIds(string condition)
        {
            string[] pids = condition.Split(',');
            for (int i = 0; i < pids.Length; i++)
            {
                if (!String.IsNullOrEmpty(pids[i]))
                {
                    string id_str = pids[i];
                    int ID = UtilNumber.Parse(id_str);
                    var toDeletes = db.{$ClassName}.Where({$InstanceName} => {$InstanceName}.ID.Equals(ID));
                    foreach (var toDelete in toDeletes)
                    {
                        db.{$ClassName}.Remove(toDelete);
                    }
                }
            }
            db.SaveChanges();
            return new JObject(
                new JProperty("success", true)
            );
        }

        /// <summary>
        /// 分页方法:{$Table_Comment}
        /// </summary>
        /// <see cref="http://diaosbook.com/Post/2012/9/21/linq-paging-in-entity-framework"/>
        /// <param name="condition">
        /// 查询条件对象:
        ///     必须传递分页参数：start:分页开始数，默认从0开始
        ///     limit:分页查询数，默认10个。
        /// </param>
        /// <returns></returns>
        [DirectMethod]
        public ExtService{$ClassName} queryPage{$ClassName}(Dictionary<String, object> condition)
        {
            int StartPoint = 1, EndPoint = 15;

            if (condition.ContainsKey("start")) StartPoint = Convert.ToInt16(condition["start"])+1;
            if (condition.ContainsKey("limit"))
            {
                EndPoint = Convert.ToInt16(condition["limit"]);
                EndPoint = StartPoint + EndPoint - 1;
            }
            UtilDictionary.Removes(condition, "start", "limit");

            if ({$InstanceName}Service == null) {$InstanceName}Service = new Service{$ClassName}();
            string WhereClause = FiltertoCondition(condition);
            int RowCount = {$InstanceName}Service.Count(WhereClause);//总行记录数
            if (RowCount > 0)
            {
                List<{$ClassName}> list{$ClassName}s = {$InstanceName}Service.QueryPage(StartPoint, EndPoint, WhereClause).ToList<{$ClassName}>();
                if (EndPoint > RowCount) EndPoint = RowCount;
                this.Stores = new List<Object>();
                foreach ({$ClassName} {$InstanceName} in list{$ClassName}s)
                {
{$SpecialResult}
                }
            }
            this.TotalCount = RowCount;
            this.Success = true;
            return this;
        }

        /// <summary>
        /// 导入:{$Table_Comment}
        /// </summary>
        public static JObject import{$ClassName}(string fileName)
        {
            //Excel导出入到DataTable
            DataTable dt = UtilExcelOle.ExcelToDataTableBySheet(fileName,"{$ClassName}");
            if (dt != null)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>()
                {
{$ColumnCommentName}
                };

                UtilDataTable.ReplaceColumnName(dt, dic);

                //循环插入数据
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    {$ClassName} {$InstanceName} = new {$ClassName}();
                    UtilDataTable.ToObject({$InstanceName}, dt.Rows[i], dt.Columns);
{$ImportConvertDataToShow}
                    db.{$ClassName}.Add({$InstanceName});
                }
                db.SaveChanges();
            }
            return new JObject(
                new JProperty("success", true),
                new JProperty("data",true)
            );
        }

        /// <summary>
        /// 导出:{$Table_Comment}
        /// </summary>
        /// <param name="condition">查询条件对象</param>
        /// <returns></returns>
        [DirectMethod]
        public JObject export{$ClassName}(Dictionary<String, object> condition)
        {
            var {$InstanceName}s = db.{$ClassName}.OrderByDescending(e => e.ID);
            string attachment_url ="";
            if ({$InstanceName}s != null)
            {
                var query={$InstanceName}s.AsEnumerable();

                foreach ({$ClassName} {$InstanceName} in query)
                {
{$ExportConvertShowToData}
                }

                DataTable dt = UtilDataTable.ToDataTable(query); 
                dt.TableName = "{$ClassName}";
                UtilDataTable.DeleteColumns(dt, {$EnumColumnName} "{$CommitTime_Str}", "{$UpdateTime_Str}");
                Dictionary<string, string> dic = new Dictionary<string, string>()
                {
{$ColumnNameComment}
                };
                UtilDataTable.ReplaceColumnName(dt, dic);

                string fileName = "{$InstanceName}"+UtilDateTime.NowS()+".xls";
                attachment_url=Gc.UploadUrl+"/attachment/{$InstanceName}/"+fileName;
                fileName=Path.Combine(Gc.UploadPath,"attachment", "{$InstanceName}", fileName);
                UtilExcelOle.DataTableToExcel(fileName, dt);
            }
           
            return new JObject(
                new JProperty("success", true),
                new JProperty("data",attachment_url)
            );
        }
    }
}